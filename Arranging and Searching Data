{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNUM2rB2TP1bSow75zOE7E/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/5quidL0rd/Algorithm-Development/blob/main/Arranging%20and%20Searching%20Data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Arranging and Searching Data**"
      ],
      "metadata": {
        "id": "iApLVnSzdWUK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using a selection sort"
      ],
      "metadata": {
        "id": "vbcqPOrQddci"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cl0EYxvlbCmg",
        "outputId": "ff0d8004-6d28-4ba8-aa24-79cbfc5f3ccd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
          ]
        }
      ],
      "source": [
        "data = [9, 5, 7, 4, 2, 8, 1, 10, 6, 3]\n",
        "\n",
        "for scanIndex in range(0, len(data)):\n",
        "  minIndex = scanIndex\n",
        "\n",
        "  for compIndex in range(scanIndex + 1, len(data)):\n",
        "    if data[compIndex] < data[minIndex]:\n",
        "      minIndex = compIndex\n",
        "\n",
        "  if minIndex != scanIndex:\n",
        "    data[scanIndex], data[minIndex] = \\\n",
        "        data[minIndex], data[scanIndex]\n",
        "print(data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Insertion sort"
      ],
      "metadata": {
        "id": "7Zc3xo0weDOx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = [9, 5, 7, 4, 2, 8, 1, 10, 6, 3]\n",
        "\n",
        "for scanIndex in range(1, len(data)):\n",
        "  temp = data[scanIndex]\n",
        "\n",
        "  minIndex = scanIndex\n",
        "\n",
        "  while minIndex > 0 and temp < data[minIndex - 1]:\n",
        "    data[minIndex] = data[minIndex - 1]\n",
        "    minIndex -= 1\n",
        "\n",
        "  data[minIndex] = temp\n",
        "  print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gj1OCRHaeEUR",
        "outputId": "de9dd10a-346b-4466-858c-41a220a46fc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 9, 7, 4, 2, 8, 1, 10, 6, 3]\n",
            "[5, 7, 9, 4, 2, 8, 1, 10, 6, 3]\n",
            "[4, 5, 7, 9, 2, 8, 1, 10, 6, 3]\n",
            "[2, 4, 5, 7, 9, 8, 1, 10, 6, 3]\n",
            "[2, 4, 5, 7, 8, 9, 1, 10, 6, 3]\n",
            "[1, 2, 4, 5, 7, 8, 9, 10, 6, 3]\n",
            "[1, 2, 4, 5, 7, 8, 9, 10, 6, 3]\n",
            "[1, 2, 4, 5, 6, 7, 8, 9, 10, 3]\n",
            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Quick Sort"
      ],
      "metadata": {
        "id": "LiP96gUPfQrM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = [9, 5, 7, 4, 2, 8, 1, 10, 6, 3]\n",
        "\n",
        "def partition(data, left, right):\n",
        "    pivot = data[left]\n",
        "    lIndex = left + 1\n",
        "    rIndex = right\n",
        "\n",
        "    while True:\n",
        "        while lIndex <= rIndex and data[lIndex] <= pivot:\n",
        "            lIndex += 1\n",
        "        while rIndex >= lIndex and data[rIndex] >= pivot:\n",
        "            rIndex -= 1\n",
        "        if rIndex <= lIndex:\n",
        "            break\n",
        "        data[lIndex], data[rIndex] = data[rIndex], data[lIndex]\n",
        "\n",
        "    data[left], data[rIndex] = data[rIndex], data[left]\n",
        "    return rIndex\n",
        "\n",
        "def quickSort(data, left, right):\n",
        "    if right <= left:\n",
        "        return\n",
        "    else:\n",
        "        pivot = partition(data, left, right)\n",
        "        quickSort(data, left, pivot-1)\n",
        "        quickSort(data, pivot+1, right)\n",
        "\n",
        "quickSort(data, 0, len(data)-1)\n",
        "print(data)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BpY8Lb6KfTTq",
        "outputId": "e0d4568b-b882-4bd9-e073-27b26c4329ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
          ]
        }
      ]
    }
  ]
}